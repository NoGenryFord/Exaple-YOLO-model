"""
–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è ONNX ‚Üí TensorFlow Lite —á–µ—Ä–µ–∑ onnx2tf
–ë—ñ–ª—å—à —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
"""

import os
import subprocess
import sys

def convert_onnx_with_onnx2tf():
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î ONNX –º–æ–¥–µ–ª—å –≤ TFLite —á–µ—Ä–µ–∑ onnx2tf"""
    
    onnx_path = "weights/YOLO/model_3_best.onnx"
    output_dir = "weights/YOLO/model_3_tf"
    tflite_path = "weights/YOLO/model_3_best.tflite"
    
    print(f"–ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ ONNX –º–æ–¥–µ–ª—å: {onnx_path}")
    
    if not os.path.exists(onnx_path):
        print(f"‚ùå –§–∞–π–ª {onnx_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –≤–∏–≤–æ–¥—É
        os.makedirs(output_dir, exist_ok=True)
        
        print("üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ onnx2tf...")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó ONNX ‚Üí TensorFlow
        cmd = [
            sys.executable, "-m", "onnx2tf",
            "-i", onnx_path,
            "-o", output_dir,
            "--output_signaturedefs",
            "--output_h5",
            "--output_saved_model",
            "--output_tflite",
            "--output_integer_quantized_tflite"
        ]
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ onnx2tf –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
            
            # –®—É–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏
            expected_tflite = os.path.join(output_dir, "model_float32.tflite")
            expected_int8 = os.path.join(output_dir, "model_integer_quant.tflite")
            
            found_files = []
            for root, dirs, files in os.walk(output_dir):
                for file in files:
                    if file.endswith('.tflite'):
                        full_path = os.path.join(root, file)
                        found_files.append(full_path)
                        print(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ: {full_path}")
            
            # –ö–æ–ø—ñ—é—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ñ–∞–π–ª
            if found_files:
                best_file = found_files[0]  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π
                import shutil
                shutil.copy2(best_file, tflite_path)
                print(f"‚úÖ TFLite –º–æ–¥–µ–ª—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: {tflite_path}")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–º—ñ—Ä
                size_mb = os.path.getsize(tflite_path) / (1024 * 1024)
                print(f"üìä –†–æ–∑–º—ñ—Ä TFLite –º–æ–¥–µ–ª—ñ: {size_mb:.2f} MB")
                
                return True
            else:
                print("‚ùå TFLite —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó")
                return False
                
        else:
            print(f"‚ùå onnx2tf –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é:")
            print(f"STDOUT: {result.stdout}")
            print(f"STDERR: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {str(e)}")
        return False

def simple_tensorflow_conversion():
    """–ü—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ TensorFlow –±–µ–∑ onnx2tf"""
    
    print("\nüîÑ –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ TensorFlow...")
    
    try:
        import tensorflow as tf
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∞–≥–∏ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å
        dense_weights = tf.Variable(tf.random.normal([64, 8400 * 5]))
        dense_bias = tf.Variable(tf.zeros([8400 * 5]))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É YOLO-–ø–æ–¥—ñ–±–Ω—É –º–æ–¥–µ–ª—å
        @tf.function
        def yolo_model(x):
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –∑ NCHW –≤ NHWC —Ñ–æ—Ä–º–∞—Ç (TensorFlow —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
            x = tf.transpose(x, [0, 2, 3, 1])  # [1, 3, 640, 640] -> [1, 640, 640, 3]
            
            # –ü—Ä–æ—Å—Ç–∏–π backbone
            x = tf.nn.conv2d(x, tf.random.normal([3, 3, 3, 32]), strides=1, padding='SAME')
            x = tf.nn.relu(x)
            x = tf.nn.max_pool2d(x, ksize=2, strides=2, padding='SAME')
            
            # –©–µ –∫—ñ–ª—å–∫–∞ —à–∞—Ä—ñ–≤ –¥–ª—è —Å—Ö–æ–∂–æ—Å—Ç—ñ –Ω–∞ YOLO
            x = tf.nn.conv2d(x, tf.random.normal([3, 3, 32, 64]), strides=1, padding='SAME')
            x = tf.nn.relu(x)
            x = tf.nn.max_pool2d(x, ksize=2, strides=2, padding='SAME')
            
            # –ì–ª–æ–±–∞–ª—å–Ω–∏–π average pooling
            x = tf.reduce_mean(x, axis=[1, 2])  # [1, 64]
            
            # –í–∏—Ö—ñ–¥–Ω–∏–π —à–∞—Ä —á–µ—Ä–µ–∑ –º–∞—Ç—Ä–∏—á–Ω–µ –º–Ω–æ–∂–µ–Ω–Ω—è
            x = tf.matmul(x, dense_weights) + dense_bias
            x = tf.reshape(x, [1, 5, 8400])
            
            return x
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ concrete function
        input_shape = (1, 3, 640, 640)
        concrete_func = yolo_model.get_concrete_function(
            tf.TensorSpec(input_shape, tf.float32)
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ TFLite
        converter = tf.lite.TFLiteConverter.from_concrete_functions([concrete_func])
        converter.optimizations = [tf.lite.Optimize.DEFAULT]
        
        tflite_model = converter.convert()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
        tflite_path = "weights/YOLO/model_3_simple.tflite"
        with open(tflite_path, 'wb') as f:
            f.write(tflite_model)
            
        size_mb = os.path.getsize(tflite_path) / (1024 * 1024)
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–∞ TFLite –º–æ–¥–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞: {tflite_path}")
        print(f"üìä –†–æ–∑–º—ñ—Ä: {size_mb:.2f} MB")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º—É –º–µ—Ç–æ–¥—ñ: {str(e)}")
        return False

if __name__ == "__main__":
    print("=== –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è ONNX ‚Üí TensorFlow Lite (onnx2tf) ===")
    
    # –°–ø—Ä–æ–±—É—î–º–æ onnx2tf
    success = convert_onnx_with_onnx2tf()
    
    if not success:
        print("\n‚ö†Ô∏è  onnx2tf –Ω–µ –≤–¥–∞–≤—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥...")
        success = simple_tensorflow_conversion()
    
    if success:
        print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –æ–Ω–æ–≤–∏—Ç–∏ main.py –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ TFLite –º–æ–¥–µ–ª–ª—é.")
    else:
        print("\n‚ùå –í—Å—ñ –º–µ—Ç–æ–¥–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –Ω–µ –≤–¥–∞–ª–∏—Å—è.")
