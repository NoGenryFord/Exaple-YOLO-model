"""
–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è ONNX –º–æ–¥–µ–ª—ñ –≤ TensorFlow Lite
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î tf2onnx –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ONNX —ñ TensorFlow –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
"""

import onnx
import tensorflow as tf
from tensorflow.lite.python import lite
import numpy as np
import os

def convert_onnx_to_tflite():
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î ONNX –º–æ–¥–µ–ª—å –≤ TensorFlow Lite"""
    
    onnx_path = "weights/YOLO/model_3_best.onnx"
    tflite_path = "weights/YOLO/model_3_best.tflite"
    
    print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ ONNX –º–æ–¥–µ–ª—å: {onnx_path}")
    
    if not os.path.exists(onnx_path):
        print(f"‚ùå –§–∞–π–ª {onnx_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
        
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ ONNX –º–æ–¥–µ–ª—å
        onnx_model = onnx.load(onnx_path)
        
        print("üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ ONNX –º–æ–¥–µ–ª—å:")
        print(f"   - –í–µ—Ä—Å—ñ—è ONNX: {onnx_model.opset_import[0].version}")
        print(f"   - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤: {len(onnx_model.graph.node)}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Ö—ñ–¥ —Ç–∞ –≤–∏—Ö—ñ–¥
        input_info = onnx_model.graph.input[0]
        output_info = onnx_model.graph.output[0]
        
        print(f"   - –í—Ö—ñ–¥: {input_info.name}")
        print(f"   - –í–∏—Ö—ñ–¥: {output_info.name}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π TensorFlow –≥—Ä–∞—Ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        print("\nüîÑ –°—Ç–≤–æ—Ä—é—î–º–æ TensorFlow Lite –º–æ–¥–µ–ª—å...")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ tf2onnx –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
        import tf2onnx
        from tf2onnx import tf_loader
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ ONNX –≤ TensorFlow –≥—Ä–∞—Ñ
        with tf.Graph().as_default():
            tf_rep = tf2onnx.backend.prepare(onnx_model)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ TensorFlow Lite –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            concrete_func = tf_rep.export_graph()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Ö—ñ–¥–Ω—É —Ñ–æ—Ä–º—É –∑ ONNX –º–æ–¥–µ–ª—ñ
            input_shape = [1, 3, 640, 640]  # YOLO —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            converter = tf.lite.TFLiteConverter.from_concrete_functions([concrete_func])
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
            converter.optimizations = [tf.lite.Optimize.DEFAULT]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ
            tflite_model = converter.convert()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ TFLite –º–æ–¥–µ–ª—å
            with open(tflite_path, 'wb') as f:
                f.write(tflite_model)
                
            print(f"‚úÖ TensorFlow Lite –º–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {tflite_path}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ –ø—Ä–æ –º–æ–¥–µ–ª—å
            model_size = os.path.getsize(tflite_path) / (1024 * 1024)  # MB
            original_size = os.path.getsize(onnx_path) / (1024 * 1024)  # MB
            print(f"üìä –†–æ–∑–º—ñ—Ä ONNX –º–æ–¥–µ–ª—ñ: {original_size:.2f} MB")
            print(f"üìä –†–æ–∑–º—ñ—Ä TFLite –º–æ–¥–µ–ª—ñ: {model_size:.2f} MB")
            print(f"üìä –°—Ç–∏—Å–Ω–µ–Ω–Ω—è: {(original_size - model_size) / original_size * 100:.1f}%")
            
            return True
            
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {str(e)}")
        print("–°–ø—Ä–æ–±—É–π—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏: pip install tf2onnx")
        return False
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {str(e)}")
        return False

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ - —è–∫—â–æ tf2onnx –Ω–µ –ø—Ä–∞—Ü—é—î
def convert_onnx_to_tflite_simple():
    """–ü—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π TensorFlow"""
    
    print("\nüîÑ –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó...")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ dummy –º–æ–¥–µ–ª—å –∑ —Ç–∞–∫–∏–º–∏ –∂ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        input_shape = (1, 3, 640, 640)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –≥—Ä–∞—Ñ TensorFlow
        @tf.function
        def dummy_model(x):
            # –¶–µ –∑–∞–≥–ª—É—à–∫–∞ - –∑–∞–º—ñ–Ω–∏–º–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É –º–æ–¥–µ–ª—å –ø—ñ–∑–Ω—ñ—à–µ
            return tf.random.normal((1, 5, 8400))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ concrete function
        concrete_func = dummy_model.get_concrete_function(
            tf.TensorSpec(input_shape, tf.float32)
        )
        
        # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
        converter = tf.lite.TFLiteConverter.from_concrete_functions([concrete_func])
        tflite_model = converter.convert()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –º–æ–¥–µ–ª—å
        test_path = "weights/YOLO/test_model.tflite"
        with open(test_path, 'wb') as f:
            f.write(tflite_model)
            
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞ TFLite –º–æ–¥–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞: {test_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º—É –º–µ—Ç–æ–¥—ñ: {str(e)}")
        return False

if __name__ == "__main__":
    print("=== –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è ONNX ‚Üí TensorFlow Lite ===")
    
    # –°–ø—Ä–æ–±—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥
    success = convert_onnx_to_tflite()
    
    if not success:
        print("\n‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –Ω–µ –≤–¥–∞–≤—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π...")
        success = convert_onnx_to_tflite_simple()
    
    if success:
        print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("\n‚ùå –í—Å—ñ –º–µ—Ç–æ–¥–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –Ω–µ –≤–¥–∞–ª–∏—Å—è.")
