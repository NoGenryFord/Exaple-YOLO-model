"""
–ï–∫—Å–ø–æ—Ä—Ç YOLO –º–æ–¥–µ–ª—ñ —É TensorFlow SavedModel, –∞ –ø–æ—Ç—ñ–º –≤ TFLite
–û–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ ai-edge-litert
"""

from ultralytics import YOLO
import tensorflow as tf
import os

def convert_pt_to_savedmodel():
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î PyTorch –º–æ–¥–µ–ª—å YOLO –≤ TensorFlow SavedModel"""
    
    pt_model_path = "weights/YOLO/model_3_best.pt"
    
    print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ PyTorch –º–æ–¥–µ–ª—å: {pt_model_path}")
    
    if not os.path.exists(pt_model_path):
        print(f"‚ùå –§–∞–π–ª {pt_model_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return None
        
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—å
        model = YOLO(pt_model_path)
        
        print("üîÑ –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥–µ–ª—å –≤ TensorFlow SavedModel...")
        
        # –ï–∫—Å–ø–æ—Ä—Ç —É SavedModel
        saved_model_path = model.export(format='saved_model')
        
        print(f"‚úÖ SavedModel –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {saved_model_path}")
        return saved_model_path
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –µ–∫—Å–ø–æ—Ä—Ç—É SavedModel: {str(e)}")
        return None

def convert_savedmodel_to_tflite(saved_model_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î SavedModel –≤ TensorFlow Lite"""
    
    if not saved_model_path or not os.path.exists(saved_model_path):
        print(f"‚ùå SavedModel –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {saved_model_path}")
        return False
        
    try:
        print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ SavedModel –≤ TensorFlow Lite...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ TFLite –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
        converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_path)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        converter.optimizations = [tf.lite.Optimize.DEFAULT]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ
        tflite_model = converter.convert()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ TFLite –º–æ–¥–µ–ª—å
        tflite_path = "weights/YOLO/model_3_best.tflite"
        with open(tflite_path, 'wb') as f:
            f.write(tflite_model)
            
        print(f"‚úÖ TensorFlow Lite –º–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {tflite_path}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ –ø—Ä–æ –º–æ–¥–µ–ª—å
        model_size = os.path.getsize(tflite_path) / (1024 * 1024)  # MB
        print(f"üìä –†–æ–∑–º—ñ—Ä TFLite –º–æ–¥–µ–ª—ñ: {model_size:.2f} MB")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤ TFLite: {str(e)}")
        return False

if __name__ == "__main__":
    print("=== –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è PyTorch ‚Üí SavedModel ‚Üí TensorFlow Lite ===")
    
    # –ö—Ä–æ–∫ 1: PyTorch ‚Üí SavedModel
    saved_model_path = convert_pt_to_savedmodel()
    
    if saved_model_path:
        # –ö—Ä–æ–∫ 2: SavedModel ‚Üí TFLite
        success = convert_savedmodel_to_tflite(saved_model_path)
        
        if success:
            print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
            print("–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –æ–Ω–æ–≤–∏—Ç–∏ main.py –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ TFLite –º–æ–¥–µ–ª–ª—é.")
        else:
            print("\n‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ TFLite –Ω–µ –≤–¥–∞–ª–∞—Å—è.")
    else:
        print("\n‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ SavedModel –Ω–µ –≤–¥–∞–ª–∞—Å—è.")
