#!/usr/bin/env python3
"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Raspberry Pi –∫–∞–º–µ—Ä–∏ —á–µ—Ä–µ–∑ HTTP streaming
–¶–µ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞—î rpicam-vid –≤ —Ä–µ–∂–∏–º—ñ HTTP —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –¥–æ –Ω—å–æ–≥–æ
"""

import cv2 as cv
import subprocess
import time
import threading
import os
import signal

class RaspberryPiCamera:
    def __init__(self, width=640, height=480, fps=30, port=8080):
        self.width = width
        self.height = height
        self.fps = fps
        self.port = port
        self.process = None
        self.cap = None
        
    def start_streaming(self):
        """–ó–∞–ø—É—Å–∫–∞—î HTTP streaming –∑ rpicam-vid"""
        try:
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É rpicam-vid –∑ HTTP streaming
            cmd = [
                "rpicam-vid",
                "--timeout", "0",  # –ë–µ–∑–∫—ñ–Ω–µ—á–Ω–∞ –∑–π–æ–º–∫–∞
                "--width", str(self.width),
                "--height", str(self.height),
                "--framerate", str(self.fps),
                "--listen", "-o", f"tcp://0.0.0.0:{self.port}",
                "--codec", "mjpeg",
                "--inline"
            ]
            
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ HTTP streaming: {' '.join(cmd)}")
            self.process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                preexec_fn=os.setsid
            )
            
            # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            time.sleep(3)
            
            # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ HTTP –ø–æ—Ç–æ–∫—É
            stream_url = f"tcp://127.0.0.1:{self.port}"
            self.cap = cv.VideoCapture(stream_url)
            
            if self.cap.isOpened():
                print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ HTTP stream: {stream_url}")
                return True
            else:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ HTTP stream")
                self.cleanup()
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É HTTP streaming: {e}")
            self.cleanup()
            return False
    
    def read(self):
        """–ß–∏—Ç–∞—î –∫–∞–¥—Ä –∑ –∫–∞–º–µ—Ä–∏"""
        if self.cap:
            return self.cap.read()
        return False, None
    
    def isOpened(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–∞–º–µ—Ä–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞"""
        return self.cap and self.cap.isOpened()
    
    def release(self):
        """–ó–≤—ñ–ª—å–Ω—è—î —Ä–µ—Å—É—Ä—Å–∏"""
        self.cleanup()
    
    def cleanup(self):
        """–û—á–∏—â–∞—î –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏"""
        if self.cap:
            self.cap.release()
            self.cap = None
        
        if self.process:
            try:
                os.killpg(os.getpgid(self.process.pid), signal.SIGTERM)
                self.process.wait(timeout=5)
            except:
                try:
                    os.killpg(os.getpgid(self.process.pid), signal.SIGKILL)
                except:
                    pass
            self.process = None

def test_pi_camera():
    """–¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –∫–∞–º–µ—Ä–∏"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Raspberry Pi –∫–∞–º–µ—Ä–∏...")
    
    pi_cam = RaspberryPiCamera(width=640, height=480, fps=30)
    
    if not pi_cam.start_streaming():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∫–∞–º–µ—Ä—É")
        return
    
    print("üìπ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ESC –¥–ª—è –≤–∏—Ö–æ–¥—É")
    
    while True:
        ret, frame = pi_cam.read()
        if ret:
            cv.imshow("Raspberry Pi Camera", frame)
            
            key = cv.waitKey(1) & 0xFF
            if key == 27:  # ESC
                break
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –∫–∞–¥—Ä")
            break
    
    pi_cam.cleanup()
    cv.destroyAllWindows()
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_pi_camera()
