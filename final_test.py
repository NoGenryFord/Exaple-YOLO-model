"""
–§—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç—É - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
"""

import os
import sys
import subprocess

def check_file_exists(path, description):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É"""
    if os.path.exists(path):
        print(f"‚úÖ {description}: {path}")
        return True
    else:
        print(f"‚ùå {description} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {path}")
        return False

def check_model_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ –º–æ–¥–µ–ª–µ–π"""
    print("=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –º–æ–¥–µ–ª–µ–π ===")
    
    files_to_check = [
        ("weights/YOLO/model_3_best.pt", "PyTorch –º–æ–¥–µ–ª—å"),
        ("weights/YOLO/model_3_best.onnx", "ONNX –º–æ–¥–µ–ª—å"),
        ("weights/YOLO/model_3_simple.tflite", "TensorFlow Lite –º–æ–¥–µ–ª—å"),
    ]
    
    all_good = True
    for path, description in files_to_check:
        if not check_file_exists(path, description):
            all_good = False
        else:
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
            size_mb = os.path.getsize(path) / (1024 * 1024)
            print(f"   üìä –†–æ–∑–º—ñ—Ä: {size_mb:.2f} MB")
    
    return all_good

def check_python_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Python —Ñ–∞–π–ª—ñ–≤"""
    print("\n=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python —Ñ–∞–π–ª—ñ–≤ ===")
    
    files_to_check = [
        ("main.py", "–û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª (PyTorch)"),
        ("main_tflite.py", "TensorFlow Lite –≤–µ—Ä—Å—ñ—è"),
        ("test_tflite.py", "–¢–µ—Å—Ç TFLite –º–æ–¥–µ–ª—ñ"),
        ("src/convert_to_tflite/onnx2tf_converter.py", "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä ONNX ‚Üí TFLite"),
        ("requirements.txt", "–§–∞–π–ª –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"),
        ("README.md", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è"),
    ]
    
    all_good = True
    for path, description in files_to_check:
        if not check_file_exists(path, description):
            all_good = False
    
    return all_good

def test_import_tflite():
    """–¢–µ—Å—Ç—É—î —ñ–º–ø–æ—Ä—Ç TensorFlow Lite"""
    print("\n=== –¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—É TensorFlow Lite ===")
    
    try:
        import tensorflow as tf
        print("‚úÖ TensorFlow —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        print(f"   üìä –í–µ—Ä—Å—ñ—è TensorFlow: {tf.__version__}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ TFLite
        interpreter = tf.lite.Interpreter("weights/YOLO/model_3_simple.tflite")
        interpreter.allocate_tensors()
        print("‚úÖ TFLite —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –ø—Ä–∞—Ü—é—î")
        
        input_details = interpreter.get_input_details()
        output_details = interpreter.get_output_details()
        
        print(f"   üìä –í—Ö—ñ–¥–Ω–∞ —Ñ–æ—Ä–º–∞: {input_details[0]['shape']}")
        print(f"   üìä –í–∏—Ö—ñ–¥–Ω–∞ —Ñ–æ—Ä–º–∞: {output_details[0]['shape']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É TensorFlow Lite: {e}")
        return False

def test_opencv():
    """–¢–µ—Å—Ç—É—î OpenCV"""
    print("\n=== –¢–µ—Å—Ç OpenCV ===")
    
    try:
        import cv2 as cv
        print("‚úÖ OpenCV —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        print(f"   üìä –í–µ—Ä—Å—ñ—è OpenCV: {cv.__version__}")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        import numpy as np
        test_img = np.zeros((480, 640, 3), dtype=np.uint8)
        resized = cv.resize(test_img, (320, 240))
        print("‚úÖ OpenCV –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenCV: {e}")
        return False

def test_deep_sort():
    """–¢–µ—Å—Ç—É—î Deep Sort"""
    print("\n=== –¢–µ—Å—Ç Deep Sort ===")
    
    try:
        from deep_sort_realtime.deepsort_tracker import DeepSort
        deep_sort = DeepSort(max_age=30, n_init=3)
        print("‚úÖ Deep Sort –ø—Ä–∞—Ü—é—î")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Deep Sort: {e}")
        return False

def run_quick_tflite_test():
    """–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç TFLite –º–æ–¥–µ–ª—ñ"""
    print("\n=== –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç TFLite –º–æ–¥–µ–ª—ñ ===")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à –∫–ª–∞—Å
        sys.path.append('.')
        from main_tflite import TFLiteYOLO
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–µ–ª—å
        yolo_model = TFLiteYOLO("weights/YOLO/model_3_simple.tflite")
        
        # –¢–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        import numpy as np
        test_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        
        # –î–µ—Ç–µ–∫—Ü—ñ—è
        detections = yolo_model.detect(test_image)
        
        print(f"‚úÖ TFLite –º–æ–¥–µ–ª—å –ø—Ä–∞—Ü—é—î! –ó–Ω–∞–π–¥–µ–Ω–æ {len(detections)} –æ–±'—î–∫—Ç—ñ–≤")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ –ø–µ—Ä—à–∏—Ö –¥–µ—Ç–µ–∫—Ü—ñ–π
        for i, detection in enumerate(detections[:3]):
            x1, y1, x2, y2, conf = detection
            print(f"   –û–±'—î–∫—Ç {i+1}: [{x1:.0f}, {y1:.0f}, {x2:.0f}, {y2:.0f}] conf={conf:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ TFLite —Ç–µ—Å—Ç—É: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üß™ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç—É Drone AI v.0.9.1t")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤
    tests = [
        ("–§–∞–π–ª–∏ –º–æ–¥–µ–ª–µ–π", check_model_files),
        ("Python —Ñ–∞–π–ª–∏", check_python_files),
        ("TensorFlow Lite", test_import_tflite),
        ("OpenCV", test_opencv),
        ("Deep Sort", test_deep_sort),
        ("TFLite –º–æ–¥–µ–ª—å", run_quick_tflite_test),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üéØ –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û"
        print(f"{status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫—É:")
        print("   PyTorch –≤–µ—Ä—Å—ñ—è: python main.py")
        print("   TFLite –≤–µ—Ä—Å—ñ—è: python main_tflite.py")
    else:
        print("‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
