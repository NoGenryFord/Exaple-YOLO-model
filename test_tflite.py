"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è TFLite –º–æ–¥–µ–ª—ñ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ
–î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –±–µ–∑ –∫–∞–º–µ—Ä–∏
"""

import tensorflow as tf
import cv2 as cv
import numpy as np
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ main_tflite.py
sys.path.append('.')
from main_tflite import TFLiteYOLO, draw_detection

def test_tflite_model():
    """–¢–µ—Å—Ç—É—î TFLite –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ"""
    
    model_path = "weights/YOLO/model_3_simple.tflite"
    
    print("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è TFLite –º–æ–¥–µ–ª—ñ ===")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—å
    try:
        yolo_model = TFLiteYOLO(model_path)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {e}")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    test_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–ª—å–æ—Ä–æ–≤—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∏ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –æ–±'—î–∫—Ç—ñ–≤
    cv.rectangle(test_image, (100, 100), (300, 250), (0, 255, 0), -1)  # –ó–µ–ª–µ–Ω–∏–π
    cv.rectangle(test_image, (400, 200), (550, 350), (255, 0, 0), -1)  # –°–∏–Ω—ñ–π
    cv.rectangle(test_image, (200, 300), (350, 400), (0, 0, 255), -1)  # –ß–µ—Ä–≤–æ–Ω–∏–π
    
    print("üñºÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –æ–±'—î–∫—Ç–∞–º–∏")
    
    # –¢–µ—Å—Ç—É—î–º–æ –¥–µ—Ç–µ–∫—Ü—ñ—é
    try:
        print("üîÑ –í–∏–∫–æ–Ω—É—î–º–æ –¥–µ—Ç–µ–∫—Ü—ñ—é...")
        detections = yolo_model.detect(test_image)
        print(f"‚úÖ –î–µ—Ç–µ–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–Ω–∞–π–¥–µ–Ω–æ {len(detections)} –æ–±'—î–∫—Ç—ñ–≤")
        
        # –ú–∞–ª—é—î–º–æ –¥–µ—Ç–µ–∫—Ü—ñ—ó
        result_image = test_image.copy()
        for i, detection in enumerate(detections):
            x1, y1, x2, y2, conf = detection
            print(f"   –û–±'—î–∫—Ç {i+1}: [{x1}, {y1}, {x2}, {y2}] confidence={conf:.3f}")
            draw_detection(result_image, int(x1), int(y1), int(x2), int(y2), conf)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cv.imshow("Test Image", test_image)
        cv.imshow("Detection Results", result_image)
        
        print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è...")
        cv.waitKey(0)
        cv.destroyAllWindows()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ—Ç–µ–∫—Ü—ñ—ó: {e}")
        import traceback
        traceback.print_exc()

def test_model_performance():
    """–¢–µ—Å—Ç—É—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ"""
    
    model_path = "weights/YOLO/model_3_simple.tflite"
    
    print("\n=== –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ===")
    
    try:
        yolo_model = TFLiteYOLO(model_path)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        test_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        
        # –ü—Ä–æ–≥—Ä—ñ–≤ –º–æ–¥–µ–ª—ñ
        print("üî• –ü—Ä–æ–≥—Ä—ñ–≤ –º–æ–¥–µ–ª—ñ...")
        for _ in range(5):
            yolo_model.detect(test_image)
        
        # –¢–µ—Å—Ç—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å
        num_tests = 20
        import time
        
        start_time = time.time()
        for i in range(num_tests):
            detections = yolo_model.detect(test_image)
            if i % 5 == 0:
                print(f"   –¢–µ—Å—Ç {i+1}/{num_tests}...")
        
        end_time = time.time()
        
        total_time = end_time - start_time
        avg_time = total_time / num_tests
        fps = 1.0 / avg_time
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:")
        print(f"   –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: {num_tests}")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {total_time:.2f}s")
        print(f"   –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å—É: {avg_time:.3f}s")
        print(f"   –¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∏–π FPS: {fps:.1f}")
        
        if fps > 10:
            print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ö–æ—Ä–æ—à–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É!")
        elif fps > 5:
            print("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∏–π–Ω—è—Ç–Ω–∞")
        else:
            print("‚ùå –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∏–∑—å–∫–∞")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")

if __name__ == "__main__":
    test_tflite_model()
    test_model_performance()
